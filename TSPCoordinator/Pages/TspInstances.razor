@page "/tsp-instances"

<PageTitle>TSP instance list</PageTitle>

@using System.Globalization
@using TspCoordinator.Data
@inject IStringLocalizer<TspInstances> Loc
@inject TspInstancesService TSPInstancesService

<MudText Typo="Typo.h4">TSP instance list</MudText>

@if (instances == null)
{
    <MudText>Loading...</MudText>
}
else
{
    <MudGrid Spacing="4" Justify="MudBlazor.Justify.FlexStart" >
        @foreach (var (instance, index) in instances.Select((val, idx) => (val, idx + 1)))
        {
            <MudItem xs="6" sm="4">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderAvatar>
                            <MudAvatar Variant="Variant.Outlined" Color="@GetColorByStatus(instance.Status)">
                                <MudIcon Icon="@Icons.Material.Filled.Storage" />
                            </MudAvatar>
                        </CardHeaderAvatar>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h5">TSP @Loc["Number"]@index</MudText>
                            <MudText Typo="Typo.body2">
                                @switch(instance.Status)
                                {
                                    case TspInstanceStatus.Active:
                                        <MudAlert Dense="true" Severity="Severity.Success">@Loc["Active"]</MudAlert>
                                        break;
                                    case TspInstanceStatus.NotWorking:
                                        <MudAlert Dense="true" Severity="Severity.Error">@Loc["NotWorking"]
                                            (@instance.HealthCheckAttemptsRemaining)</MudAlert>
                                        break;
                                    case TspInstanceStatus.NotResponding:
                                        <MudAlert Dense="true" Severity="Severity.Warning">@Loc["NotResponding"]
                                            (@instance.HealthCheckAttemptsRemaining)</MudAlert>
                                        break;
                                    case TspInstanceStatus.Busy:
                                        <MudAlert Dense="true" Severity="Severity.Warning">@Loc["Busy"]</MudAlert>
                                        break;
                                    case TspInstanceStatus.CannotGetExtendedInfo:
                                        <MudAlert Dense="true" Severity="Severity.Info">@Loc["CannotGetExtendedInfo"]</MudAlert>
                                        break;
                                }
                            </MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText Typo="Typo.body2">ID: @instance.Uuid</MudText>
                        <MudText>@Loc["Version"] @instance.Version</MudText>
                        <MudText>@Loc["Location"]: @instance.Location</MudText>
                        <MudText>
                            @Loc["JobsRunning"]: 
                            @(instance.RunningJobsCount)
                            @if(instance.SentJobsCount > 0)
                            {
                            @: + @(instance.SentJobsCount)
                            }
                        </MudText>
                        <MudText Typo="Typo.body2">@Loc["LastHealthCheck"]: @instance.HealthCheckDate.ToString("G")</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
    @* <table class="table table-striped">
        <thead>
            <tr>
                <th>@Loc["Number"]</th>
                <th>TSP ID</th>
                <th>@Loc["Location"]</th>
                <th>@Loc["Version"]</th>
                <th>@Loc["LastHealthCheck"]</th>
                <th>@Loc["Status"]</th>
                <th>@Loc["JobsRunning"]</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var (instance, index) in instances.Select( (val, idx) => (val, idx + 1) ))
            {
                <tr>
                    <td scope="row">@index</td>
                    <td>@instance.Uuid</td>
                    <td>
                        @instance.Location
                        (@(instance.IsHostAdvertised ? Loc["AdvertisedIP"] : Loc["AutoIP"]),
                        @(instance.IsPortAdvertised ? Loc["AdvertisedPort"] : Loc["AutoPort"]))
                        </td>
                    <td>@instance.Version</td>
                    <td>@instance.HealthCheckDate.ToString("G")</td>
                    <td>
                    @switch(instance.Status)
                    {
                        case TspInstanceStatus.Active:
                            <span class="badge rounded-pill bg-success">@Loc["Active"]</span>
                            break;
                        case TspInstanceStatus.NotWorking:
                            <span class="badge rounded-pill bg-danger">@Loc["NotWorking"]</span>
                            <span class="badge rounded-pill bg-danger">@Loc["HealthCheckAttemptsRemaining"]: @instance.HealthCheckAttemptsRemaining</span>
                            break;
                        case TspInstanceStatus.NotResponding:
                            <span class="badge rounded-pill bg-warning">@Loc["NotResponding"]</span>
                            <span class="badge rounded-pill bg-warning">@Loc["HealthCheckAttemptsRemaining"]: @instance.HealthCheckAttemptsRemaining</span>
                            break;
                        case TspInstanceStatus.Busy:
                            <span class="badge rounded-pill bg-warning">@Loc["Busy"]</span>
                            break;
                        case TspInstanceStatus.CannotGetExtendedInfo:
                            <span class="badge rounded-pill bg-warning">@Loc["CannotGetExtendedInfo"]</span>
                            break;
                    }
                    </td>
                    <td>
                        <span>@(instance.RunningJobsCount)</span>
                        @if(instance.SentJobsCount > 0)
                        {
                            <span> + @(instance.SentJobsCount)</span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table> *@
}

@code {
    private TspInstance[]? instances;

    private Color GetColorByStatus(TspInstanceStatus status) => status switch {
        TspInstanceStatus.Active => Color.Success,
        TspInstanceStatus.NotWorking => Color.Error,
        TspInstanceStatus.NotResponding => Color.Warning,
        TspInstanceStatus.Busy => Color.Warning,
        TspInstanceStatus.CannotGetExtendedInfo => Color.Dark,
    };

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        
        var timer = new System.Threading.Timer((_) =>
        {
            InvokeAsync( async () =>
            {
                instances = await TSPInstancesService.GetInstancesAsync();
                StateHasChanged();
            });
        }, null, 0, 5000);
    }
}
