@page "/jobs/{id}"

<PageTitle>Job details</PageTitle>

@using TspCoordinator.Data
@inject IStringLocalizer<JobDetails> Loc
@inject JobService JobService

@if(Job == null)
{
    <p>Job with id @Id not found.</p>
}
else
{
    <h2>@Loc["JobDetails"]: @Job.JobId</h2>

    <div class="card card-body">
        <BSContainer Container="Container.Fluid">
            <BSButton Color="@(JobCanBeStopped() ? BlazorStrap.BSColor.Danger : BlazorStrap.BSColor.Default)" @onclick=StopJob IsDisabled="@(!JobCanBeStopped())">Stop/Cancel</BSButton>
        </BSContainer>
    </div>

    @if(JobStopMessage != null)
    {
        <BSAlert Color="@(JobStopMessageColor ?? BlazorStrap.BSColor.Primary)">@JobStopMessage</BSAlert>
    }

    <div class="card card-body">
        <p>@Loc["Status"]: @Job.Status</p>
        <p>@Loc["TimeSinceLastActivity"]: @((DateTime.Now - Job.Lifecycle.Events.LastOrDefault().Key).ToString(@"d\:hh\:mm\:ss\.fff"))</p>
        <p>@Loc["RunningTime"]: @(Job.Lifecycle.RunningTime.ToString(@"d\:hh\:mm\:ss\.fff"))</p>
        <p>@Loc["RowsRead"]: @Job.RowsRead</p>
        <p>@Loc["RowsWritten"]: @Job.RowsWritten</p>
    </div>
    <h4>Lifecycle (@(Job.Lifecycle.Events.Count))</h4>
    @foreach (var e in Job.Lifecycle.Events)
    {
        <p>
            @e.Key : @e.Value
        </p>
    }
    <h4>@Loc["Request"]</h4>
    <h5>@Loc["Source"]</h5>
    <BSAccordion>
        <BSAccordionItem>
            <Header>
                @Loc["Source"] 
                <BSBadge Color="@BlazorStrap.BSColor.Secondary" IsPill="true">@(Job.Request.Source.Type)</BSBadge>
            </Header>
            <Content>
                <BSListGroup>
                @if(Job.Request.Source.Config is Data.TspApi.V3.JdbcInputConf jdbcConf)
                {
                    <BSListGroupItem>JDBC URL: @(new Uri(jdbcConf.JdbcUrl).AbsolutePath)</BSListGroupItem>
                    <BSListGroupItem>Query: @jdbcConf.Query</BSListGroupItem>
                    <BSListGroupItem>Max time-series gap, ms: @(jdbcConf.EventsMaxGapMs ?? 60000)</BSListGroupItem>
                    <BSListGroupItem>Max incident gap, ms: @(jdbcConf.DefaultEventsGapMs ?? 2000)</BSListGroupItem>
                }
                @if(Job.Request.Source.Config is Data.TspApi.V3.KafkaInputConf kafkaConf)
                {
                    <BSListGroupItem>Broker(s): @kafkaConf.Brokers</BSListGroupItem>
                    <BSListGroupItem>Topic: @kafkaConf.Topic</BSListGroupItem>
                    <BSListGroupItem>Max time-series gap, ms: @(kafkaConf.EventsMaxGapMs ?? 60000)</BSListGroupItem>
                    <BSListGroupItem>Max incident gap, ms: @(kafkaConf.DefaultEventsGapMs ?? 2000)</BSListGroupItem>
                }
                </BSListGroup>
            </Content>
        </BSAccordionItem>
    </BSAccordion>
    <h5>@Loc["Sinks"] (@(Job.Request.Sinks.Count))</h5>
    <BSAccordion>        
        @foreach (var (sink, index) in Job.Request.Sinks.Select((x, i) => (x, i + 1)))
        {
            <BSAccordionItem>
            <Header>
                @Loc["SinkNo"] @index 
                <BSBadge Color="@BlazorStrap.BSColor.Secondary" IsPill="true">@(sink.Type)</BSBadge>
            </Header>
            <Content>
                <BSListGroup>
                @if(sink.Config is Data.TspApi.V3.JdbcOutputConf jdbcConf)
                {
                    <BSListGroupItem>JDBC URL: @(new Uri(jdbcConf.JdbcUrl).AbsolutePath)</BSListGroupItem>
                }
                @if(sink.Config is Data.TspApi.V3.KafkaOutputConf kafkaConf)
                {
                    <BSListGroupItem>Broker: @kafkaConf.Broker</BSListGroupItem>
                    <BSListGroupItem>Topic: @kafkaConf.Topic</BSListGroupItem>
                }
                </BSListGroup>
            </Content>
        </BSAccordionItem>
        }
    </BSAccordion>
    <h4>@Loc["Patterns"] (@(Job.Request?.Patterns.Count ?? 0))</h4>
    <BSCollapse>
        <Toggler>
            <BSToggle IsButton="false" Color="@BlazorStrap.BSColor.Primary">@Loc["Patterns"] (@(Job.Request?.Patterns.Count ?? 0))</BSToggle>
        </Toggler>
        <Content>
            <BSAccordion>
            @foreach (var pattern in Job.Request?.Patterns ?? new List<Data.TspApi.V3.Pattern>())
            {
                <BSAccordionItem>
                    <Header>ID @pattern.Id</Header>
                    <Content>
                        <p>Subunit: <b>@pattern.Subunit</b></p>
                        @if (pattern.Metadata?.Count > 0)
                        {
                            <p>Metadata: @String.Join("; ", pattern.Metadata) </p>
                        }                        
                        <pre>
                            <code style="display: inline-block;white-space: normal;max-width:100%; word-break:break-all; word-wrap:break-word;">
                                @pattern.SourceCode
                            </code>
                        </pre>
                    </Content>
                </BSAccordionItem>
            }
            </BSAccordion>
        </Content>
    </BSCollapse>
}

@code {
    [Parameter]
    public string? Id { get; set; }

    public Job? Job { get; set; }

    public string? JobStopMessage { get; set; } = null;
    public BlazorStrap.BSColor? JobStopMessageColor { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        var timer = new System.Threading.Timer((_) =>
        {
            InvokeAsync( async () =>
            {
                Job = JobService.FindJobById(Id ?? "");
                StateHasChanged();
            });
        }, null, 0, 5000);
    }

    public async void StopJob()
    {
        (JobStopMessage, JobStopMessageColor) = await JobService.StopJob(Job?.JobId ?? "") switch
        {
            JobStopResult.Dequeued => 
                ($"Job {Job?.JobId} successfully dequeued.", BlazorStrap.BSColor.Info),
            JobStopResult.StopRequested => 
                ($"Stop request for job {Job?.JobId} sent.", BlazorStrap.BSColor.Info),
            JobStopResult.NotFound => 
                ($"Job with {Job?.JobId} not queued or running (can be already completed).", BlazorStrap.BSColor.Danger),
            _ => 
                ("Something went wrong, invalid value for job stop status reported.", BlazorStrap.BSColor.Warning)
        };
    }

    public bool JobCanBeStopped() => Job?.Status switch {
        JobStatus.Enqueued => true,
        JobStatus.Running => true,
        _ => false
    };
}