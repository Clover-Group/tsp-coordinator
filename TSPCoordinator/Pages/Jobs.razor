@page "/jobs"

<PageTitle>Jobs</PageTitle>

@using TspCoordinator.Data
@inject IStringLocalizer<Jobs> Loc
@inject JobService JobService

<MudText Typo="Typo.h4">@Loc["Jobs"]</MudText>

@if (jobQueue == null)
{
    <MudText Typo="Typo.h5">@Loc["JobQueue"] </MudText>
    <MudText>Loading...</MudText>
}
else
{
    <MudText Typo="Typo.h5">@Loc["JobQueue"] (@jobQueue.Count())</MudText>
    <MudTable Items="@jobQueue" Striped="true">
        <HeaderContent>
            <MudTh>@Loc["JobID"]</MudTh>
            <MudTh>@Loc["Priority"]</MudTh>
            <MudTh>@Loc["Patterns"]</MudTh>
            <MudTh>@Loc["Status"]</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd><MudLink Href="@("jobs/" +context.JobId)">@context.JobId</MudLink></MudTd>
            <MudTd>@(context.Request?.Priority ?? 0)</MudTd>
            <MudTd>@(context.Request?.Patterns.Count ?? 0)</MudTd>
            <MudTd>
                @switch (context.Status)
                {
                    case JobStatus.Enqueued:
                        <MudChip Icon="@Icons.Material.Filled.Queue" Color="Color.Secondary">@Loc["Enqueued"]</MudChip>
                        break;
                    case JobStatus.Running:
                        <MudChip Icon="@Icons.Material.Filled.DirectionsRun" Color="Color.Info">@Loc["Running"]</MudChip>
                        break;
                    case JobStatus.Finished:
                        <MudChip Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success">@Loc["Finished"]</MudChip>
                        break;
                    case JobStatus.Failed:
                        <MudChip Icon="@Icons.Material.Filled.Error">@Loc["Failed"]</MudChip>
                        break;
                    case JobStatus.Canceled:
                        <MudChip Icon="@Icons.Material.Filled.Cancel">@Loc["Canceled"]</MudChip>
                        break;
                }
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}

@if (runningJobs == null)
{
    <MudText Typo="Typo.h5">@Loc["RunningJobs"]</MudText>
    <MudText>Loading...</MudText>
}
else
{
    <MudText Typo="Typo.h5">@Loc["RunningJobs"] (@runningJobs.Count())</MudText>
    <MudTable Items="@runningJobs" Striped="true">
        <HeaderContent>
            <MudTh>@Loc["JobID"]</MudTh>
            <MudTh>@Loc["Priority"]</MudTh>
            <MudTh>@Loc["Patterns"]</MudTh>
            <MudTh>@Loc["RunningOn"]</MudTh>
            <MudTh>@Loc["RunningTime"]</MudTh>
            <MudTh>@Loc["RowsRead"]</MudTh>
            <MudTh>@Loc["RowsWritten"]</MudTh>
            <MudTh>@Loc["Status"]</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd><MudLink Href="@("jobs/" +context.JobId)">@context.JobId</MudLink></MudTd>
            <MudTd>@(context.Request?.Priority ?? 0)</MudTd>
            <MudTd>@(context.Request?.Patterns.Count ?? 0)</MudTd>
            <MudTd>@context.RunningOn</MudTd>
            <MudTd>@context.Lifecycle.RunningTime</MudTd>
            <MudTd>@context.RowsRead</MudTd>
            <MudTd>@context.RowsWritten</MudTd>
            <MudTd>
                @switch (context.Status)
                {
                    case JobStatus.Enqueued:
                        <MudChip Icon="@Icons.Material.Filled.Queue" Color="Color.Secondary">@Loc["Enqueued"]</MudChip>
                        break;
                    case JobStatus.Running:
                        <MudChip Icon="@Icons.Material.Filled.DirectionsRun" Color="Color.Info">@Loc["Running"]</MudChip>
                        break;
                    case JobStatus.Finished:
                        <MudChip Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success">@Loc["Finished"]</MudChip>
                        break;
                    case JobStatus.Failed:
                        <MudChip Icon="@Icons.Material.Filled.Error">@Loc["Failed"]</MudChip>
                        break;
                    case JobStatus.Canceled:
                        <MudChip Icon="@Icons.Material.Filled.Cancel">@Loc["Canceled"]</MudChip>
                        break;
                }
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}

@if (completedJobs == null)
{
    <MudText Typo="Typo.h5">@Loc["CompletedJobs"]</MudText>
    <MudText>Loading...</MudText>
}
else
{
    <MudText Typo="Typo.h5">@Loc["CompletedJobs"] (@completedJobs.Count())</MudText>
    <MudTable Items="@completedJobs" Striped="true">
        <HeaderContent>
            <MudTh>@Loc["JobID"]</MudTh>
            <MudTh>@Loc["Priority"]</MudTh>
            <MudTh>@Loc["Patterns"]</MudTh>
            <MudTh>@Loc["RunningTime"]</MudTh>
            <MudTh>@Loc["RowsRead"]</MudTh>
            <MudTh>@Loc["RowsWritten"]</MudTh>
            <MudTh>@Loc["Status"]</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd><MudLink Href="@("jobs/" +context.JobId)">@context.JobId</MudLink></MudTd>
            <MudTd>@(context.Request?.Priority ?? 0)</MudTd>
            <MudTd>@(context.Request?.Patterns.Count ?? 0)</MudTd>
            <MudTd>@context.Lifecycle.RunningTime</MudTd>
            <MudTd>@context.RowsRead</MudTd>
            <MudTd>@context.RowsWritten</MudTd>
            <MudTd>
                @switch (context.Status)
                {
                    case JobStatus.Enqueued:
                        <MudChip Icon="@Icons.Material.Filled.Queue" Color="Color.Secondary">@Loc["Enqueued"]</MudChip>
                        break;
                    case JobStatus.Running:
                        <MudChip Icon="@Icons.Material.Filled.DirectionsRun" Color="Color.Info">@Loc["Running"]</MudChip>
                        break;
                    case JobStatus.Finished:
                        <MudChip Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success">@Loc["Finished"]</MudChip>
                        break;
                    case JobStatus.Failed:
                        <MudChip Icon="@Icons.Material.Filled.Error" Color="Color.Error">@Loc["Failed"]</MudChip>
                        break;
                    case JobStatus.Canceled:
                        <MudChip Icon="@Icons.Material.Filled.Cancel" Color="Color.Dark">@Loc["Canceled"]</MudChip>
                        break;
                }
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}

@code {
    private List<Job>? jobQueue;
    private List<Job>? runningJobs;
    private List<Job>? completedJobs;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        
        var timer = new System.Threading.Timer((_) =>
        {
            InvokeAsync( async () =>
            {
                jobQueue = await JobService.GetJobQueueAsync();
                runningJobs = await JobService.GetRunningJobsAsync();
                completedJobs = await JobService.GetCompletedQueueAsync();
                StateHasChanged();
            });
        }, null, 0, 5000);
    }
}