@page "/jobs"

<PageTitle>Jobs</PageTitle>

@using TspCoordinator.Data
@inject IStringLocalizer<Jobs> Loc
@inject JobService JobService

<h1>@Loc["Jobs"]</h1>

@if (jobQueue == null)
{
    <h4>@Loc["JobQueue"] </h4>
    <p>Loading...</p>
}
else
{
    <h4>@Loc["JobQueue"] (@jobQueue.Count())</h4>
    <table class="table table-striped">
    <thead>
        <tr>
            <th>@Loc["JobID"]</th>
            <th>@Loc["Priority"]</th>
            <th>@Loc["Status"]</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var job in jobQueue)
            {
                <tr>
                    <td>
                        <a href="jobs/@job.JobId">@job.JobId</a>
                        @if(job.IsExternal)
                        {
                            <span class="badge rounded-pill bg-primary">EXTERNAL</span>
                        }
                    </td>
                    <td>@(job.Request?.Priority ?? 0)</td>
                    <td>
                        @switch (job.Status)
                        {
                            case JobStatus.Enqueued:
                                <span class="badge rounded-pill bg-secondary">@Loc["Enqueued"]</span>
                                break;
                            case JobStatus.Running:
                                <span class="badge rounded-pill bg-primary">@Loc["Running"]</span>
                                break;
                            case JobStatus.Finished:
                                <span class="badge rounded-pill bg-success">@Loc["Finished"]</span>
                                break;
                            case JobStatus.Failed:
                                <span class="badge rounded-pill bg-danger">@Loc["Failed"]</span>
                                break;
                            case JobStatus.Canceled:
                                <span class="badge rounded-pill bg-dark">@Loc["Canceled"]</span>
                                break;
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (runningJobs == null)
{
    <h4>@Loc["RunningJobs"]</h4>
    <p>Loading...</p>
}
else
{
    <h4>@Loc["RunningJobs"] (@runningJobs.Count())</h4>
    <table class="table table-striped">
    <thead>
        <tr>
            <th>@Loc["JobID"]</th>
            <th>@Loc["Priority"]</th>
            <th>@Loc["RunningOn"]</th>
            <th>@Loc["RunningTime"]</th>
            <th>@Loc["RowsRead"]</th>
            <th>@Loc["RowsWritten"]</th>
            <th>@Loc["Status"]</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var job in runningJobs)
            {
                <tr>
                    <td><a href="jobs/@job.JobId">@job.JobId</a></td>
                    <td>@(job.Request?.Priority ?? 0)</td>
                    <td>@job.RunningOn</td>
                    <td>@job.Lifecycle.RunningTime</td>
                    <td>@job.RowsRead</td>
                    <td>@job.RowsWritten</td>
                    <td>
                        @switch (job.Status)
                        {
                            case JobStatus.Enqueued:
                                <span class="badge rounded-pill bg-secondary">@Loc["Enqueued"]</span>
                                break;
                            case JobStatus.Running:
                                <span class="badge rounded-pill bg-primary">@Loc["Running"]</span>
                                break;
                            case JobStatus.Finished:
                                <span class="badge rounded-pill bg-success">@Loc["Finished"]</span>
                                break;
                            case JobStatus.Failed:
                                <span class="badge rounded-pill bg-danger">@Loc["Failed"]</span>
                                break;
                            case JobStatus.Canceled:
                                <span class="badge rounded-pill bg-dark">@Loc["Canceled"]</span>
                                break;
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (completedJobs == null)
{
    <h4>@Loc["CompletedJobs"]</h4>
    <p>Loading...</p>
}
else
{
    <h4>@Loc["CompletedJobs"] (@completedJobs.Count())</h4>
    <table class="table table-striped">
    <thead>
        <tr>
            <th>@Loc["JobID"]</th>
            <th>@Loc["Priority"]</th>
            <th>@Loc["RunningTime"]</th>
            <th>@Loc["RowsRead"]</th>
            <th>@Loc["RowsWritten"]</th>
            <th>@Loc["Status"]</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var job in completedJobs)
            {
                <tr>
                    <td><a href="jobs/@job.JobId">@job.JobId</a></td>
                    <td>@(job.Request?.Priority ?? 0)</td>
                    <td>@job.Lifecycle.RunningTime</td>
                    <td>@job.RowsRead</td>
                    <td>@job.RowsWritten</td>
                    <td>
                        @switch (job.Status)
                        {
                            case JobStatus.Enqueued:
                                <span class="badge rounded-pill bg-secondary">@Loc["Enqueued"]</span>
                                break;
                            case JobStatus.Running:
                                <span class="badge rounded-pill bg-primary">@Loc["Running"]</span>
                                break;
                            case JobStatus.Finished:
                                <span class="badge rounded-pill bg-success">@Loc["Finished"]</span>
                                break;
                            case JobStatus.Failed:
                                <span class="badge rounded-pill bg-danger">@Loc["Failed"]</span>
                                break;
                            case JobStatus.Canceled:
                                <span class="badge rounded-pill bg-dark">@Loc["Canceled"]</span>
                                break;
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Job>? jobQueue;
    private List<Job>? runningJobs;
    private List<Job>? completedJobs;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        
        var timer = new System.Threading.Timer((_) =>
        {
            InvokeAsync( async () =>
            {
                jobQueue = await JobService.GetJobQueueAsync();
                runningJobs = await JobService.GetRunningJobsAsync();
                completedJobs = await JobService.GetCompletedQueueAsync();
                StateHasChanged();
            });
        }, null, 0, 5000);
    }
}