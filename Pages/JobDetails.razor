@page "/jobs/{id}"

<PageTitle>Job details</PageTitle>

@using TspCoordinator.Data
@using Humanizer
@inject IStringLocalizer<JobDetails> Loc
@inject JobService JobService

@if(Job == null)
{
    <p>Job with id @Id not found.</p>
}
else
{
    <h2>@Loc["JobDetails"]: @Job.JobId</h2>

    <div class="card card-body">
        <p>@Loc["Status"]: @Job.Status</p>
        <p>@Loc["TimeSinceLastActivity"]: @((DateTime.Now - Job.Lifecycle.Events.LastOrDefault().Key).Humanize(precision: 2))</p>
        <p>@Loc["RowsRead"]: @Job.RowsRead</p>
        <p>@Loc["RowsWritten"]: @Job.RowsWritten</p>
    </div>
    <h4>Lifecycle (@(Job.Lifecycle.Events.Count))</h4>
    @foreach (var e in Job.Lifecycle.Events)
    {
        <p>
            @e.Key : @e.Value
        </p>
    }
    <h4>@Loc["Request"]</h4>
    <p>
        @Loc["Source"]: <span class="badge rounded-pill bg-secondary">@(Job.Request.Source.Type)</span> 
    </p>
    <p>
        @Loc["Sinks"] (@(Job.Request.Sinks.Count) total):
        @foreach (var sink in Job.Request.Sinks)
        {
            <span class="badge rounded-pill bg-secondary">@sink.Type</span>
        }
    </p>
    <h4>@Loc["Patterns"] (@(Job.Request?.Patterns.Count ?? 0))</h4>
    @foreach (var pattern in Job.Request.Patterns)
    {
        <div class="card card-body">
            <p>ID @pattern.Id</p>
            <pre>
                <code style="display: inline-block;white-space: normal;max-width:100%; word-break:break-all; word-wrap:break-word;">
                    @pattern.SourceCode
                </code>
            </pre>
        </div>
    }
}

@code {
    [Parameter]
    public string? Id { get; set; }

    public Job? Job { get; set; }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        var timer = new System.Threading.Timer((_) =>
        {
            InvokeAsync( async () =>
            {
                Job = JobService.FindJobById(Id);
                StateHasChanged();
            });
        }, null, 0, 5000);
    }
}