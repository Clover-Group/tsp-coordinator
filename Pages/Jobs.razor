@page "/jobs"

<PageTitle>Jobs</PageTitle>

@using TSPCoordinator.Data
@inject JobService JobService

<h1>Jobs</h1>

@if (jobQueue == null) {
    <h4>Job queue</h4>
    <p>Loading...</p>
} else {
    <h4>Job queue (@jobQueue.Length)</h4>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Job ID</th>
                <th>Priority</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var job in jobQueue)
            {
                <tr>
                    <td>@job.JobId</td>
                    <td>@job.Priority</td>
                    <td>
                    @switch(job.Status)
                    {
                        case JobStatus.Enqueued:
                            <span class="badge rounded-pill bg-secondary">Enqueued</span>
                            break;
                        case JobStatus.Running:
                            <span class="badge rounded-pill bg-primary">Running</span>
                            break;
                        case JobStatus.Finished:
                            <span class="badge rounded-pill bg-success">Finished</span>
                            break;
                        case JobStatus.Failed:
                            <span class="badge rounded-pill bg-danger">Failed</span>
                            break;
                        case JobStatus.Canceled:
                            <span class="badge rounded-pill bg-dark">Canceled</span>
                            break;
                    }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (runningJobs == null) {
    <h4>Running jobs</h4>
    <p>Loading...</p>
} else {
    <h4>Running jobs (@runningJobs.Length)</h4>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Job ID</th>
                <th>Priority</th>
                <th>Rows read</th>
                <th>Rows written</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var job in runningJobs)
            {
                <tr>
                    <td>@job.JobId</td>
                    <td>@job.Priority</td>
                    <td>@job.RowsRead</td>
                    <td>@job.RowsWritten</td>
                    <td>
                    @switch(job.Status)
                    {
                        case JobStatus.Enqueued:
                            <span class="badge rounded-pill bg-secondary">Enqueued</span>
                            break;
                        case JobStatus.Running:
                            <span class="badge rounded-pill bg-primary">Running</span>
                            break;
                        case JobStatus.Finished:
                            <span class="badge rounded-pill bg-success">Finished</span>
                            break;
                        case JobStatus.Failed:
                            <span class="badge rounded-pill bg-danger">Failed</span>
                            break;
                        case JobStatus.Canceled:
                            <span class="badge rounded-pill bg-dark">Canceled</span>
                            break;
                    }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (completedJobs == null) {
    <h4>Completed jobs</h4>
    <p>Loading...</p>
} else {
    <h4>Completed jobs (@completedJobs.Length)</h4>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Job ID</th>
                <th>Priority</th>
                <th>Rows read</th>
                <th>Rows written</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var job in completedJobs)
            {
                <tr>
                    <td>@job.JobId</td>
                    <td>@job.Priority</td>
                    <td>@job.RowsRead</td>
                    <td>@job.RowsWritten</td>
                    <td>
                    @switch(job.Status)
                    {
                        case JobStatus.Enqueued:
                            <span class="badge rounded-pill bg-secondary">Enqueued</span>
                            break;
                        case JobStatus.Running:
                            <span class="badge rounded-pill bg-primary">Running</span>
                            break;
                        case JobStatus.Finished:
                            <span class="badge rounded-pill bg-success">Finished</span>
                            break;
                        case JobStatus.Failed:
                            <span class="badge rounded-pill bg-danger">Failed</span>
                            break;
                        case JobStatus.Canceled:
                            <span class="badge rounded-pill bg-dark">Canceled</span>
                            break;
                    }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Job[]? jobQueue;
    private Job[]? runningJobs;
    private Job[]? completedJobs;

    protected override async Task OnInitializedAsync()
    {
        jobQueue = await JobService.GetJobQueueAsync();
        runningJobs = await JobService.GetRunningJobsAsync();
        completedJobs = await JobService.GetCompletedQueueAsync();
    }
}